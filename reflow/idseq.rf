param (
	// Indexed genome to remove
	host_genome = "s3://czbiohub-infectious-disease/idseq-user-requests/hg38_pantro5_k16.tar"

	// Number of CPU threads/processes to use
	threads = 32
)


val idseq = "czbiohub/idseq-dag"

val dirs = make("$/dirs")
val strings = make("$/strings")
val regexp = make("$/regexp")
val path = make("$/path")

val samtools = make("./samtools.rf")

val host_file = file(host_genome)

func Untar(tar file) = 
    exec(image := idseq, mem := 60*GiB, cpu := threads) (output dir) {"
		tar xvf {{tar}} -C {{output}}
"}



func MapToHuman(read1, read2 file, id string, host_genome_dir dir, host_genome_name string) = {
	// Ensure input file has fastq.gz ending
    d := dirs.Make([id+"_R1.fastq.gz": read1, id+"_R2.fastq.gz": read2])

	// Cribbed from:
	// https://github.com/chanzuckerberg/idseq-dag/blob/master/idseq_dag/steps/run_gsnap_filter.py
    exec(image := idseq, mem := 60*GiB, cpu := threads) (sam file) {"
    	gsnapl --gunzip -A sam --batch=0 --use-shared-memory=0 --gmap-mode=all \
    		--npaths=1 --ordered -t {{threads}} --max-mismatches=40 \
    		-D {{host_genome_dir}} -d {{host_genome_name}} \
    		-o {{sam}} {{d}}/{{id}}_R1.fastq.gz {{d}}/{{id}}_R2.fastq.gz
	"}
}


func RemoveHuman(read1, read2 file, id string) = {
	// Outputs a directory with:
	// - {{id}}_human.bam
	// - {{id}}_human_unmapped_R1.fastq.gz
	// - {{id}}_human_unmapped_R2.fastq.gz
	// - {{id}}_human_unmapped_singleton.fastq.gz
	host_genome_dir := Untar(host_file)
	host_genome_basename := path.Base(host_genome)
	host_genome_name := regexp.Replace(host_genome_basename, ".tar", "")

	mapped := MapToHuman(read1, read2, id, host_genome_dir, host_genome_name)
	is_sam := true

	samtools.ExtractMappedBAMandUnmappedFASTQ(mapped, is_sam, id + "_human")
}