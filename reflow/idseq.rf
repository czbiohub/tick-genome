param (
	// Indexed genome to remove
	host_genome = "s3://idseq-database/host_filter/human/2018-02-15-utc-1518652800-unixtime__2018-02-15-utc-1518652800-unixtime/hg38_pantro5_k16.tar"

	// Number of CPU threads/processes to use
	threads = 32
)


val fastqc = "czbiohub/idseq-dag"

val dirs = make("$/dirs")
val path = make("$/path")

val samtools = make("./samtools.rf")


func MapToHuman(read1, read2 file, id string) = {
	// Ensure input file has fastq.gz ending
    d := dirs.Make([id+"_R1.fastq.gz": read1, id+"_R2.fastq.gz": read2])

    host_genome_dir := path.Dir(host_genome)
    host_genome_name := path.Base(host_genome)

	// Cribbed from:
	// https://github.com/chanzuckerberg/idseq-dag/blob/master/idseq_dag/steps/run_gsnap_filter.py
    exec(image := fastqc, mem := 60*GiB, cpu := threads) (sam file) {"
    	gsnapl -A sam --batch=0 --use-shared-memory=0 --gmap-mode=all \
    		--npaths=1 --ordered -t {{threads}} --max-mismatches=40 \
    		-D {{host_genome_dir}} -d {{host_genome_name}} \
    		# output sam file \
    		-o {{sam}} {{d}}/{{id}}_R1.fastq.gz {{d}}/{{id}}_R2.fastq.gz
	"}
}


func RemoveHuman(read1, read2 file, id string) = {
	// Outputs a directory with:
	// - {{id}}_human.bam
	// - {{id}}_human_unmapped_R1.fastq.gz
	// - {{id}}_human_unmapped_R2.fastq.gz
	// - {{id}}_human_unmapped_singleton.fastq.gz
	mapped := MapToHuman(read1, read2, id)
	is_sam := true

	samtools.ExtractMappedBAMandUnmappedFASTQ(mapped, is_sam, id + "_human")
}