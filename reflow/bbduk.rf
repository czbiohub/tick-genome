param (
      threads = 8
)
      


// phix Removal
// http://phixremoval.readthedocs.io/en/latest/
val bbmap = "quay.io/biocontainers/bbmap:38.06--2"
val utils = make("./utils.rf")
val dirs = make("$/dirs")



func PhiXTrimming(read1, read2 file, id string, minlength int) = {
    // Rename files to have fastq.gz endings
    d := dirs.Make([id+"_R1.fastq.gz": read1, id+"_R2.fastq.gz": read2])

    outdir := exec(image := bbmap, cpu := threads, mem := 8*GiB) (outdir dir) {"
        cd {{outdir}}
        bbduk.sh ref=phix \
            in={{d}}/{{id}}_R1.fastq.gz \
            in2={{d}}/{{id}}_R2.fastq.gz \
            out={{id}}_R1_bbduk_phix_trimmed.fastq.gz \
            out2={{id}}_R2_bbduk_phix_trimmed.fastq.gz \
            outm={{id}}_R1_bbduk_phix_failed.fastq.gz \
            outm2={{id}}_R2_bbduk_phix_failed.fastq.gz \
            outs={{id}}_bbduk_phix_failed_singleton.fastq.gz \
            stats={{id}}_bbduk_phix_trimmed.stats \
	       threads={{threads}} \
            # Recommended ksize for adapters, hopefully applies to PhiX \
            k=23 \
            # hamming distance = 1 \
            hdist=1 \
            # Use smaller kmers for ends of reads, in this case k=11 \
            mink=11 \
            minlen={{minlength}} \
            # trim everything to the right of PhiX \
            ktrim=r 
    "}

    val (r1, _) = dirs.Pick(outdir, "*_R1_bbduk_phix_trimmed.fastq.gz")
    val (r2, _) = dirs.Pick(outdir, "*_R2_bbduk_phix_trimmed.fastq.gz")
    val stats = dirs.Pick(outdir, "*bbduk_phix_trimmed.stats")

    val reports = utils.MakeReportDir([stats])

    // Return a "bundle" with easy-to-grab items
    {r1, r2, reports}
}



