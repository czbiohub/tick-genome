param (
	threads = 8
)


val files = make("$/files")
val dirs = make("$/dirs")
val utils = make("./utils.rf")

val samtools = "quay.io/biocontainers/samtools:1.9--h46bd0b3_0"

// Various gigabytes of memory variables
val memory_small = 8
val memory_medium = 16

// Samtools sort needs to use 75% of actual available memory otherwise it fails
val memory_large_sort = 24
// Actual amount of memory on machine
val memory_large = 32

func SamToBam(sam_or_bam file, is_sam bool) = {
	val sam_flag = if is_sam { "-S" } else { "" }

    exec(image := samtools, cpu := threads, mem := memory_medium*GiB) (bam file) {"
		samtools view --threads {{threads}} {{sam_flag}} -b {{sam_or_bam}} > {{bam}}
	"}
}


func ExtractProperlyMappedReads(bam file) = 
    exec(image := samtools, cpu := threads, mem := memory_medium*GiB) (aligned_bam file) {"
		samtools view --threads {{threads}}  -u -f 1 -F 12 {{bam}} > {{aligned_bam}}
"}

func ExtractUnmappedR1(bam file) = 
    exec(image := samtools, cpu := threads, mem := memory_medium*GiB) (output_bam file) {"
		# R1 unmapped, R2 mapped
		samtools view --threads {{threads}}  -u -f 4 -F 264 {{bam}} > {{output_bam}}
"}


func ExtractUnmappedR2(bam file) = 
    exec(image := samtools, cpu := threads, mem := memory_medium*GiB) (output_bam file) {"
		# R1 mapped, R2 unmapped
		samtools view --threads {{threads}}  -u -f 8 -F 260 {{bam}} > {{output_bam}}
"}

func ExtractUnmappedR1andR2(bam file) = 
    exec(image := samtools, cpu := threads, mem := memory_medium*GiB) (output_bam file) {"
		# R1 & R2 unmapped
		samtools view --threads {{threads}}  -u -f 12 -F 256 {{bam}} > {{output_bam}}
"}

func Merge(bams [file]) = 
    exec(image := samtools, cpu := threads, mem := memory_medium*GiB) (output_bam file) {"
		samtools merge --threads {{threads}} {{output_bam}} {{bams}}
"}


func SortByCoordinates(bam file) = 
    exec(image := samtools, cpu := threads, mem := memory_large*GiB) (output_bam file) {"
		samtools sort --threads {{threads}} -m {{memory_large_sort}}G {{bam}} > {{output_bam}}
"}


func SortByName(bam file) =
    exec(image := samtools, cpu := threads, mem := memory_large*GiB) (output_bam file) {"
		samtools sort -n -m {{memory_large_sort}}G --threads {{threads}} {{bam}} > {{output_bam}}
"}


func BamToFastq(bam file) =
    exec(image := samtools, cpu := threads, mem := memory_medium*GiB) (output dir) {"
    	cd {{output}}
        samtools fastq --threads {{threads}} \
            -s singleton.fastq.gz \
            -0 R0.fastq.gz \
            -1 R1.fastq.gz \
            -2 R2.fastq.gz {{bam}}
"}


func Flagstat(bam file) =
    exec(image := samtools, cpu := threads, mem := memory_small*GiB) (output file) {"
		samtools flagstat --threads {{threads}} {{bam}} > {{output}}
"}


func InitialQC(sam_or_bam file, is_sam bool) = {
	// Ensure output is bam and perform initial samtools flagstat
	bam := SamToBam(sam_or_bam, is_sam)
	initial_flagstat := Flagstat(bam)

	{bam, initial_flagstat}
}


func ExtractMapped(bam file) = {
	// Extract mapped reads, sort by genomic location, and spot-check the flags
	mapped := ExtractProperlyMappedReads(bam)

	mapped_sortbyname := SortByName(mapped)
	mapped_flagstat := Flagstat(mapped)
	{mapped_sortbyname, mapped_flagstat}
}


func ExtractUnmapped(bam file) = {
	// Extract unmapped reads as bam files

	unmapped_r1 := ExtractUnmappedR1(bam)
	unmapped_r2 := ExtractUnmappedR2(bam)
	unmapped_r1_and_r2 := ExtractUnmappedR1andR2(bam)

	// Merge into one bam and sort by read ID
	unmapped := Merge([unmapped_r1, unmapped_r2, unmapped_r1_and_r2])

	// Sort by name and flagstat
	unmapped_sortbyname := SortByName(unmapped)
	unmapped_flagstat := Flagstat(unmapped)
	{unmapped_sortbyname, unmapped_flagstat}
}

func ExtractMappedBAMandUnmappedFASTQ(sam_or_bam file, is_sam bool, id string) = {
	// Outputs a directory containing:
	// - {{id}}.bam
	// - {{id}}.flagstat
	// - {{id}}_mapped.bam
	// - {{id}}_mapped.flagstat
	// - {{id}}_unmapped.flagstat
	// - {{id}}_unmapped_R1.fastq.gz
	// - {{id}}_unmapped_R2.fastq.gz
	// - {{id}}_unmapped_singleton.fastq.gz

	val {bam, initial_flagstat} = InitialQC(sam_or_bam, is_sam)

	val {mapped_sortbyname, mapped_flagstat} = ExtractMapped(bam)

	val {unmapped_sortbyname, unmapped_flagstat} = ExtractUnmapped(bam)

	// Extract read1, read2, and singletons
	val fastq_dir = BamToFastq(unmapped_sortbyname)

	val (r0, _) = dirs.Pick(fastq_dir, "R0.fastq.gz")
	val (r1, _) = dirs.Pick(fastq_dir, "R1.fastq.gz")
	val (r2, _) = dirs.Pick(fastq_dir, "R2.fastq.gz")
	val (singleton, _) = dirs.Pick(fastq_dir, "singleton.fastq.gz")

	files_to_copy := [
		".flagstat": initial_flagstat, 
		".bam": bam, 
		"_mapped.sortbyname.bam": mapped_sortbyname, 
		"_mapped.flagstat": mapped_flagstat,
		"_unmapped.sortbyname.bam": unmapped_sortbyname,
		"_unmapped.flagstat": unmapped_flagstat,
		"_unmapped_R0.fastq.gz": r0,
		"_unmapped_R1.fastq.gz": r1,
		"_unmapped_R2.fastq.gz": r2,
		"_singleton.fastq.gz": singleton,]
	val renamed = [(id + suffix, f) | (suffix, f) <- files_to_copy]
	dirs.Make(map(renamed))
	// renamed
}